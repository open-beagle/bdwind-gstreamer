# Docker Compose 配置文件
# 用于部署 WebRTC 信令服务器和相关服务

version: '3.8'

services:
  # WebRTC 信令服务器
  signaling-server:
    build:
      context: ..
      dockerfile: Dockerfile.runtime
      args:
        - BUILD_TARGET=signaling
    
    container_name: bdwind-signaling-server
    hostname: signaling-server
    
    ports:
      - "8080:8080"      # HTTP/WebSocket 端口
      - "8443:8443"      # HTTPS/WSS 端口 (可选)
      - "9090:9090"      # 监控端口
    
    volumes:
      # 配置文件
      - ./signaling_server_config.yaml:/app/config.yaml:ro
      
      # 日志目录
      - ./logs:/var/log/bdwind-gstreamer
      
      # 静态文件
      - ../internal/webserver/static:/app/static:ro
      
      # TLS 证书 (可选)
      # - ./certs:/app/certs:ro
    
    environment:
      # 基础配置
      - BDWIND_CONFIG_PATH=/app/config.yaml
      - BDWIND_LOG_LEVEL=info
      - BDWIND_LOG_FORMAT=json
      
      # GStreamer 配置
      - GST_DEBUG=2
      - GST_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/gstreamer-1.0
      
      # WebRTC 配置
      - WEBRTC_SIGNALING_HOST=0.0.0.0
      - WEBRTC_SIGNALING_PORT=8080
      - WEBRTC_MAX_CONNECTIONS=1000
      
      # 性能配置
      - GOMAXPROCS=4
      - GOGC=100
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # 网络配置
    networks:
      - signaling-network
    
    # 依赖服务
    depends_on:
      - redis
      - prometheus
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=signaling-server"

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: bdwind-redis
    hostname: redis
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped
    
    networks:
      - signaling-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: bdwind-prometheus
    hostname: prometheus
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped
    
    networks:
      - signaling-network

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: bdwind-grafana
    hostname: grafana
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped
    
    networks:
      - signaling-network
    
    depends_on:
      - prometheus

  # TURN 服务器 (可选)
  coturn:
    image: coturn/coturn:latest
    container_name: bdwind-coturn
    hostname: coturn
    
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49152-65535:49152-65535/udp"
    
    volumes:
      - ./turnserver.conf:/etc/coturn/turnserver.conf:ro
    
    command: turnserver -c /etc/coturn/turnserver.conf
    
    restart: unless-stopped
    
    networks:
      - signaling-network

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: bdwind-nginx
    hostname: nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped
    
    networks:
      - signaling-network
    
    depends_on:
      - signaling-server

  # 日志聚合 (可选)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: bdwind-fluentd
    hostname: fluentd
    
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    
    volumes:
      - ./fluentd/conf:/fluentd/etc:ro
      - ./logs:/var/log/containers:ro
    
    environment:
      - FLUENTD_CONF=fluent.conf
    
    restart: unless-stopped
    
    networks:
      - signaling-network

# 网络配置
networks:
  signaling-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  redis-data:
    driver: local
  
  prometheus-data:
    driver: local
  
  grafana-data:
    driver: local

# 配置文件示例
configs:
  signaling-config:
    file: ./signaling_server_config.yaml
  
  redis-config:
    file: ./redis.conf
  
  prometheus-config:
    file: ./prometheus.yml
  
  nginx-config:
    file: ./nginx.conf

# 密钥管理 (可选)
secrets:
  jwt-secret:
    file: ./secrets/jwt-secret.txt
  
  tls-cert:
    file: ./certs/server.crt
  
  tls-key:
    file: ./certs/server.key